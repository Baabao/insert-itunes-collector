name: Continuous Integration

on:
  push:
    branches:
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
  POSTGRES_SECRET_ID: ${{secrets.POSTGRES_SECRET_ID}}
  CACHE_ENDPOINT: ${{secrets.CACHE_ENDPOINT}}
  IMAGE_REPOSITORY_NAME: ${{vars.IMAGE_REPOSITORY_NAME}}

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  check-changed-files:

    name: Check changed files
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      code-changed: ${{steps.check-files-changed.outputs.code_changed}}
      chart-changed: ${{steps.check-files-changed.outputs.chart_changed}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{github.ref}}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: true
          files: |
            Dockerfile
            **.py
            helm/**.yaml

      - name: Check files changed
        id: check-files-changed
        env:
          ALL_CHANGED_FILES: ${{steps.changed-files.outputs.all_changed_files}}
        run: |
          if [[ "$ALL_CHANGED_FILES" == *"Dockerfile"* ]] || [[ "$ALL_CHANGED_FILES" == *".py"* ]]; then
              echo "code_changed=true" >> "$GITHUB_OUTPUT"
              echo "Code was changed, build it later."
          else
              echo "Code didn't change, skip build-image job."
          fi

          if [[ "$ALL_CHANGED_FILES" == *"helm/"*.yaml* ]]; then
              echo "chart_changed=true" >> "$GITHUB_OUTPUT"
              echo "Helm files was changed, package it later."
          else
              echo "Helm files didn't change, skip package-helm job."
          fi

  build-image:

    name: Build image
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ check-changed-files ]
    if: needs.check-changed-files.outputs.code-changed == 'true'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{github.ref}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::527466361125:role/Github_Action
          role-duration-seconds: 1200
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set GitHub short sha
        id: github-short-sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{steps.login-ecr.outputs.registry}}/${{env.IMAGE_REPOSITORY_NAME}}:${{steps.github-short-sha.outputs.short_sha}}, ${{steps.login-ecr.outputs.registry}}/${{env.ECR_REPOSITORY}}:latest

  package-helm:

    name: Package Helm
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ check-changed-files ]
    if: needs.check-changed-files.outputs.chart-changed == 'true'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::527466361125:role/Github_Action
          role-duration-seconds: 1200
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Package and push helm chart to Amazon ECR
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          HELM_PATH: helm
          NAMESPACE: chart
        run: |
          helm package "$HELM_PATH"
          CHART_NAME=$(grep "name:" helm/Chart.yaml| awk '{print $2}')
          CHART_VERSION=$(grep "version:" helm/Chart.yaml| awk '{print $2}')
          helm push "$CHART_NAME"-"$CHART_VERSION".tgz oci://"$REGISTRY"/"$NAMESPACE"
